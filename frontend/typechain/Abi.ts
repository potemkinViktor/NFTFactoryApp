/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface AbiInterface extends utils.Interface {
  functions: {
    "collections(uint256)": FunctionFragment;
    "collectionsCounter()": FunctionFragment;
    "createCollection(string,string)": FunctionFragment;
    "getCollections(uint256[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "collections"
      | "collectionsCounter"
      | "createCollection"
      | "getCollections"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "collections",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collectionsCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createCollection",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollections",
    values: [BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "collections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectionsCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollections",
    data: BytesLike
  ): Result;

  events: {
    "CollectionCreated(address,string,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CollectionCreated"): EventFragment;
}

export interface CollectionCreatedEventObject {
  collection: string;
  name: string;
  symbol: string;
}
export type CollectionCreatedEvent = TypedEvent<
  [string, string, string],
  CollectionCreatedEventObject
>;

export type CollectionCreatedEventFilter =
  TypedEventFilter<CollectionCreatedEvent>;

export interface Abi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AbiInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    collections(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    collectionsCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    createCollection(
      name_: string,
      symbol_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getCollections(
      collectionsIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[string[]] & { _collections: string[] }>;
  };

  collections(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  collectionsCounter(overrides?: CallOverrides): Promise<BigNumber>;

  createCollection(
    name_: string,
    symbol_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getCollections(
    collectionsIds: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<string[]>;

  callStatic: {
    collections(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    collectionsCounter(overrides?: CallOverrides): Promise<BigNumber>;

    createCollection(
      name_: string,
      symbol_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getCollections(
      collectionsIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<string[]>;
  };

  filters: {
    "CollectionCreated(address,string,string)"(
      collection?: null,
      name?: null,
      symbol?: null
    ): CollectionCreatedEventFilter;
    CollectionCreated(
      collection?: null,
      name?: null,
      symbol?: null
    ): CollectionCreatedEventFilter;
  };

  estimateGas: {
    collections(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectionsCounter(overrides?: CallOverrides): Promise<BigNumber>;

    createCollection(
      name_: string,
      symbol_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getCollections(
      collectionsIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    collections(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collectionsCounter(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createCollection(
      name_: string,
      symbol_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getCollections(
      collectionsIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
